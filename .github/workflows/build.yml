name: Build SnipasteOCR

on:
  # Trigger on closed pull requests targeting the main branch
  pull_request:
    types: [closed]
    branches: [main]
  # Trigger on tag pushes (e.g., v1.0, v2.3.4)
  push:
    tags:
      - 'v*' # Adjust pattern if needed
  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  build:
    # Add condition to run only on merged PRs to main, tag pushes, or manual dispatch
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    
    strategy:
      matrix:
        os: [windows-latest, ubuntu-22.04]
        include:
          - os: windows-latest
            platform: win
            asset_name: SnipasteOCR-Windows.zip
            zip_command: |
              Compress-Archive -Path "dist/SnipasteOCR/*" -DestinationPath "SnipasteOCR-Windows.zip"
              if (-not (Test-Path "SnipasteOCR-Windows.zip")) {
                  throw "Failed to create zip archive"
              }
          - os: ubuntu-22.04
            platform: linux
            asset_name: SnipasteOCR-Linux.tar.gz
            archive_command: |
              tar czf SnipasteOCR-Linux.tar.gz -C dist/SnipasteOCR .
              if [[ ! -f "SnipasteOCR-Linux.tar.gz" ]]; then
                  echo "Failed to create tar archive"
                  exit 1
              fi
    
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Cache UV packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          ~/AppData/Local/uv
          ~/.cache/pip
        key: ${{ runner.os }}-uv-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      shell: bash
      run: |
        pip install uv
        uv sync

    - name: Build Release (Windows)
      if: matrix.platform == 'win'
      shell: pwsh
      run: |
        uv run pyinstaller -w main.py `
          --name=SnipasteOCR `
          --collect-all fastdeploy `
          --icon=assets/icon.ico `
          --add-data="models;models" `
          --add-data="assets;assets" `
          --add-data="config.yml;." `
          --hidden-import=pyqt6 `
          --hidden-import=PyQt6.QtWidgets `
          --hidden-import=PyQt6.QtGui `
          --hidden-import=PyQt6.QtCore `
          --hidden-import=PyQt6.sip `
          --clean `
          --noconfirm
        
        if (-not (Test-Path "dist/SnipasteOCR/SnipasteOCR.exe")) {
            throw "Build failed: SnipasteOCR.exe not found"
        }

    - name: Create .desktop file (Linux)
      if: matrix.platform == 'linux'
      shell: bash
      run: |
        mkdir -p assets
        cat <<EOF > assets/SnipasteOCR.desktop
        [Desktop Entry]
        Name=SnipasteOCR
        Exec=AppRun %F
        Icon=SnipasteOCR
        Type=Application
        Categories=Utility;
        Comment=OCR tool integrated with Snipaste
        EOF
        cp assets/icon.ico assets/SnipasteOCR.ico

    - name: Build Release (Linux)
      if: matrix.platform == 'linux'
      shell: bash
      run: |
        uv run pyinstaller -w main.py \
          --name=SnipasteOCR \
          --collect-all fastdeploy \
          --icon=assets/icon.ico \
          --add-data="models:models" \
          --add-data="assets:assets" \
          --add-data="config.yml:." \
          --hidden-import=pyqt6 \
          --hidden-import=PyQt6.QtWidgets \
          --hidden-import=PyQt6.QtGui \
          --hidden-import=PyQt6.QtCore \
          --hidden-import=PyQt6.sip \
          --clean \
          --noconfirm
        
        if [[ ! -f "dist/SnipasteOCR/SnipasteOCR" ]]; then
          echo "PyInstaller build failed: SnipasteOCR executable not found"
          exit 1
        fi

    - name: Create Archive (Windows only)
      if: matrix.platform == 'win'
      shell: pwsh
      run: ${{ matrix.zip_command }}

    - name: Create Archive (Linux only)
      if: matrix.platform == 'linux'
      shell: bash
      run: ${{ matrix.archive_command }}

    - name: Get Version
      id: get_version
      shell: bash
      run: |
        # 如果是tag push，使用tag名称
        if [ "${{ github.ref_type }}" = "tag" ]; then
          version="${{ github.ref_name }}"
        elif [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.action }}" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
          # Merged PR to main: use main-YYYYMMDD-short_hash
          hash="${{ github.sha }}" # Merge commit SHA
          hash=${hash:0:7}
          date_str=$(date +'%Y%m%d')
          version="main-${date_str}-${hash}"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual trigger: use manual-YYYYMMDD-short_hash
          hash="${{ github.sha }}" # Commit SHA from workflow_dispatch context
          hash=${hash:0:7}
          date_str=$(date +'%Y%m%d')
          version="manual-${date_str}-${hash}"
        else
          # Fallback (should ideally not be reached with current triggers)
          hash="${{ github.sha }}"
          hash=${hash:0:7}
          version="unknown-${hash}"
        fi
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "Generated build version: $version" # Logging

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: SnipasteOCR-${{ matrix.platform }}
        path: ${{ matrix.asset_name }}
        
  release:
    needs: build
    # Add condition to run only on merged PRs to main, tag pushes, or manual dispatch
    if: |
      needs.build.result == 'success' && (
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
        (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Get Version
        id: get_version
        shell: bash
        run: |
          # 如果是tag push，使用tag名称
          if [ "${{ github.ref_type }}" = "tag" ]; then
            version="${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.action }}" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            # Merged PR to main: use main-YYYYMMDD-short_hash
            hash="${{ github.sha }}" # Merge commit SHA
            hash=${hash:0:7}
            date_str=$(date +'%Y%m%d')
            version="main-${date_str}-${hash}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger: use manual-YYYYMMDD-short_hash
            hash="${{ github.sha }}" # Commit SHA from workflow_dispatch context
            hash=${hash:0:7}
            date_str=$(date +'%Y%m%d')
            version="manual-${date_str}-${hash}"
          else
            # Fallback (should ideally not be reached with current triggers)
            hash="${{ github.sha }}"
            hash=${hash:0:7}
            version="unknown-${hash}"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Generated release version: $version" # Logging
          
      - name: Delete existing release
        uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          github_token: ${{ github.token }}
          delete_release: true
        continue-on-error: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          files: |
            SnipasteOCR-win/SnipasteOCR-Windows.zip
            SnipasteOCR-linux/SnipasteOCR-Linux.tar.gz
          draft: false
          prerelease: ${{ github.ref_type != 'tag' }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            SnipasteOCR Release ${{ steps.get_version.outputs.version }}
            ${{ github.event_name == 'pull_request' && format('\nMerged Pull Request: {0}\n', github.event.pull_request.html_url) || '' }}

            ### 下载说明
            
            | 系统    | 下载文件                      | 说明                                          |
            | ------- | ----------------------------- | --------------------------------------------- |
            | Windows | `SnipasteOCR-Windows.zip` | 解压后运行 `SnipasteOCR.exe`                  |
            | Linux   | `SnipasteOCR-Linux.tar.gz`   | 解压后 (`tar xzf ...`) 进入目录运行 `SnipasteOCR` |
            
            ### 构建信息
            - Trigger: ${{ github.event_name }}
            - Ref: ${{ github.ref }}
            - Commit SHA: ${{ github.sha }}
            - Build Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
            ${{ github.event_name == 'pull_request' && format('- Base Branch: {0}', github.event.pull_request.base.ref) || '' }}
            ${{ github.event_name == 'pull_request' && format('- PR Number: {0}', github.event.number) || '' }}
            ${{ github.ref_type == 'tag' && format('- Tag: {0}', github.ref_name) || '' }}
            -构建时间: $(date -u +"%Y-%m-%dT%H:%M:%SZ") # Replaced timestamp with current time
            # - 时间: ${{ github.event.head_commit.timestamp }} # This might not be reliable/available; replaced above
